{
  "openapi": "3.0.1",
  "info": {
    "title": "Eductional-Platform APP",
    "version": "v1"
  },
  "paths": {
    "/api/Account/register-Client": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Registers a new client account.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "FullName": {
                    "type": "string"
                  },
                  "Email": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  },
                  "ProfilePicture": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Role": {
                    "$ref": "#/components/schemas/RolesOption"
                  }
                }
              },
              "encoding": {
                "FullName": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                },
                "ProfilePicture": {
                  "style": "form"
                },
                "Role": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client registered successfully.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or request."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Account/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Logs in a user or company.",
        "requestBody": {
          "description": "Login credentials (email, password).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials or input."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Account/getUserInfo/{userID}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves user information based on the provided user ID.",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "The unique identifier (GUID) of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user information when the user is found.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Returned when no user matches the provided user ID."
          }
        }
      }
    },
    "/api/Account/forgotPassword": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Sends a password reset OTP to the user's email.",
        "requestBody": {
          "description": "Email to send the password reset link to.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset OTP sent successfully."
          },
          "400": {
            "description": "Invalid input."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Account/resetPassword": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Resets the user's password using an OTP.",
        "requestBody": {
          "description": "Reset password request details, including OTP.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully."
          },
          "400": {
            "description": "Invalid OTP or request."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Account/change-password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Changes the user's password.",
        "requestBody": {
          "description": "Change password request details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully."
          },
          "400": {
            "description": "Invalid current password."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Account/check-email": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Checks if the email is already in use.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email to check.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Check successful, result returned."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Account/verify-otp": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Verifies the OTP code.",
        "requestBody": {
          "description": "OTP verification request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OtpVerificationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OtpVerificationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OtpVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully."
          },
          "400": {
            "description": "Invalid or expired OTP."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/Account/addrole": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Adds a new role to the user.",
        "requestBody": {
          "description": "Role details to assign.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRoleDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRoleDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddRoleDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/refreshtoken": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Refreshes the user's authentication token.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Account/revokeToken": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Revokes a refresh token.",
        "requestBody": {
          "description": "Token details to revoke.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokTokenDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokTokenDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RevokTokenDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddRoleDTO": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string",
            "format": "uuid"
          },
          "roleName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "result": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "isAuthenticated": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "userID": {
            "type": "string",
            "format": "uuid"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "refreshTokenExpiration": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordRequest": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          },
          "confirmPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ForgotPasswordDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpStatusCode": {
        "enum": [
          100,
          101,
          102,
          103,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          226,
          300,
          301,
          302,
          303,
          304,
          305,
          306,
          307,
          308,
          400,
          401,
          402,
          403,
          404,
          405,
          406,
          407,
          408,
          409,
          410,
          411,
          412,
          413,
          414,
          415,
          416,
          417,
          421,
          422,
          423,
          424,
          426,
          428,
          429,
          431,
          451,
          500,
          501,
          502,
          503,
          504,
          505,
          506,
          507,
          508,
          510,
          511
        ],
        "type": "integer",
        "format": "int32"
      },
      "LoginDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "format": "password",
            "nullable": true
          },
          "rememberMe": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OtpVerificationRequest": {
        "required": [
          "email",
          "otp"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string"
          },
          "otp": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordDTO": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "nullable": true
          },
          "confirmPassword": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RevokTokenDTO": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RolesOption": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      }
    }
  }
}